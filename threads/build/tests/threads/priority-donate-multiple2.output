c[?7l[2J[0mSeaBIOS (version rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org)


iPXE (http://ipxe.org) 00:03.0 C980 PCI2.10 PnP PMM+0FF915A0+0FEF15A0 C980
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from Hard Disk..Kernel command line: -q run priority-donate-multiple2
Pintos booting with: 
	base_mem: 0x0 ~ 0x100000 (Usable: 704 kB)
	ext_mem: 0x100000 ~ 0x100000000 (Usable: 261,376 kB)
Calibrating timer...  104,755,200 loops/s.
Boot complete.
Executing 'priority-donate-multiple2':
(priority-donate-multiple2) begin
(priority-donate-multiple2) Main thread should have priority 34.  Actual priority: 31.
(priority-donate-multiple2) Thread c finished.
(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 31.
(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 31.
(priority-donate-multiple2) Threads b, a, c should have just finished, in that order.
(priority-donate-multiple2) Main thread should have priority 31.  Actual priority: 31.
(priority-donate-multiple2) end
Execution of 'priority-donate-multiple2' complete.
Timer: 23 ticks
Thread: 0 idle ticks, 24 kernel ticks, 0 user ticks
Console: 936 characters output
Keyboard: 0 keys pressed
Powering off...
Interrupt 0x06 (#UD Invalid Opcode Exception) at rip=8004a45020
 cr2=0000000000000000 error=               0
rax 0000000000000000 rbx 000000800421349d rcx 0000000000000790 rdx 0000008004217b01
rsp 0000008004000f70 rbp 0000008004000f80 rsi 0000008004219ff8 rdi 0000000000000000
rip 0000008004a45020 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 000000800421017f r13 000000800420dba2 r14 0000000100000000
r15 0000000100000000 rflags 00200246
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x800420e226 0x8004207a21 0x8004207ba0 0x8004206098 0x800420652e.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 25 ticks
Thread: 0 idle ticks, 25 kernel ticks, 0 user ticks
Console: 1