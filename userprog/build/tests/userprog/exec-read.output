c[?7l[2J[0mSeaBIOS (version rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org)


iPXE (http://ipxe.org) 00:03.0 C980 PCI2.10 PnP PMM+0FF915A0+0FEF15A0 C980
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from Hard Disk..Kernel command line: -q -f put exec-read put sample.txt put child-read run exec-read
0 ~ 9fc00 1
100000 ~ ffe0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0xffe0000 (Usable: 260,992 kB)
Calibrating timer...  104,755,200 loops/s.
hd0:0: detected 313 sector (156 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 223 sector (111 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'exec-read' into the file system...
Putting 'sample.txt' into the file system...
Putting 'child-read' into the file system...
Executing 'exec-read':
(exec-read) begin
(exec-read) open "sample.txt"
file name: sample.txt
fd: 3, file open : 3
(exec-read) read "sample.txt" first 20 bytes
Page fault at 0x700000014: not present error reading page in kernel context.
Interrupt 0x0e (#PF Page-Fault Exception) at rip=80042186e0
 cr2=0000000700000014 error=               0
rax 0000000700000014 rbx 0000000000000000 rcx 0000000000605f45 rdx 00000080042b8000
rsp 00000080042b8e48 rbp 00000080042b8e50 rsi 0000000000605f45 rdi 0000000700000014
rip 00000080042186e0 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000206 r12 000000800421d7b3 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000206
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:97 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x8004218661 0x800421d4b6 0x800421d667 0x80042095f1 0x8004209a0f 0x8004218883 0x800421bcc6 0x800421dbd8 0x800421d8cd 0x800421d6dc 0x400196 0x40046e 0x400f0f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 134 ticks
Thread: 42 idle ticks, 82 kernel ticks, 10 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 149 reads, 494 writes
hd1:0: 223 reads, 0 writes
Console: 2028 characters output
Key