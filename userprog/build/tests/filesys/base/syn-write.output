c[?7l[2J[0mSeaBIOS (version rel-1.11.0-0-g63451fca13-prebuilt.qemu-project.org)


iPXE (http://ipxe.org) 00:03.0 C980 PCI2.10 PnP PMM+0FF915A0+0FEF15A0 C980
Press Ctrl-B to configure iPXE (PCI 00:03.0)...                                                                               


Booting from Hard Disk...
Kernel command line: -q -f put syn-write put child-syn-wrt run syn-write
0 ~ 9fc00 1
100000 ~ ffe0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0xffe0000 (Usable: 260,992 kB)
Calibrating timer...  104,755,200 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 220 sector (110 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
(syn-write) exec child 5 of 10: "child-syn-wrt 4"
(syn-write) exec child 6 of 10: "child-syn-wrt 5"
(syn-write) exec child 7 of 10: "child-syn-wrt 6"
(syn-write) exec child 8 of 10: "child-syn-wrt 7"
(syn-write) exec child 9 of 10: "child-syn-wrt 8"
(syn-write) exec child 10 of 10: "child-syn-wrt 9"
child-syn-wrt: exit(0)
(syn-write) wait for child 1 of 10 returned 0 (expected 0)
child-syn-wrt: exit(7)
child-syn-wrt: exit(3)
child-syn-wrt: exit(6)
child-syn-wrt: exit(1)
(syn-write) wait for child 2 of 10 returned 1 (expected 1)
child-syn-wrt: exit(9)
child-syn-wrt: exit(8)
child-syn-wrt: exit(4)
child-syn-wrt: exit(5)
child-syn-wrt: exit(2)
(syn-write) wait for child 3 of 10 returned 2 (expected 2)
Interrupt 0x0d (#GP General Protection Exception) at rip=800421c62b
 cr2=0000000000000000 error=               0
rax cccccccccccccc0c rbx 0000000000000000 rcx 0000000000403816 rdx 0000000000000020
rsp 00000080042b9eb0 rbp 00000080042b9ee0 rsi 0000000000000000 rdi 00000080042b90d0
rip 000000800421c62b r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421dc1d r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000296
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:98 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x800421875d 0x800421d906 0x80042096ed 0x8004209b0b 0x800421e063 0x800421dd2e 0x800421db46 0x4007b7 0x400196 0x400fa5 0x400fee.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 126 ticks
Thread: 47 idle ticks, 36 kernel ticks, 43 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 673 reads, 510 writes
hd1:0: 220 reads, 0 writes
Console: 2692 characters output
Key